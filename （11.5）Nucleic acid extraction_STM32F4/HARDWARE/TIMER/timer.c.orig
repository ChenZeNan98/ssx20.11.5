#include "timer.h"
#include "usart.h"
#include "my_func.h"

TIM_ICInitTypeDef  TIM1_ICInitStructure;

extern vu16 USART3_RX_STA;

void TIM1_Int_Init(u16 arr,u16 psc)
{
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
  NVIC_InitTypeDef NVIC_InitStructure;

  RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM1, ENABLE); //时钟使能

  TIM_TimeBaseStructure.TIM_Period = arr; //设置自动重装载寄存器周期值
  TIM_TimeBaseStructure.TIM_Prescaler =(psc-1);//设置预分频值
  TIM_TimeBaseStructure.TIM_ClockDivision = 0; //设置时钟分割
  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;//向上计数模式
  TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;//重复计数设置
  TIM_TimeBaseInit(TIM1, &TIM_TimeBaseStructure); //参数初始化
  TIM_ClearFlag(TIM1, TIM_FLAG_Update);//清中断标志位

  TIM_ITConfig(      //使能或者失能指定的TIM中断
    TIM1,            //TIM1
    TIM_IT_Update  | //TIM 更新中断源
    TIM_IT_Trigger,  //TIM 触发中断源 
    ENABLE  	     //使能
    );
	
  //设置优先级
  NVIC_InitStructure.NVIC_IRQChannel = TIM1_UP_IRQn;  
  NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;//先占优先级0级
  NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;  	   //从优先级0级
  NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
  NVIC_Init(&NVIC_InitStructure); 

  TIM_Cmd(TIM1, ENABLE);  //使能TIMx外设

}

////定时器1中断服务程序
void TIM1_UP_IRQHandler(void)
{
    int i=0;
    if (TIM_GetITStatus(TIM1, TIM_IT_Update) != RESET)//是更新中断
    {
        USART3_RX_STA|=1<<15;	//标记接收完成
        TIM_ClearITPendingBit(TIM2, TIM_IT_Update  );  //清除TIM2更新中断标志
        TIM_Cmd(TIM2, DISABLE);  //关闭TIM2
        //printf("TIM2IRQ\r\n");

    }
}

void TIM2_Int_Init(u16 arr,u16 psc)
{
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE); //时钟使能


    TIM_TimeBaseStructure.TIM_Period = arr; //设置在下一个更新事件装入活动的自动重装载寄存器周期的值	 计数到5000为500ms
    TIM_TimeBaseStructure.TIM_Prescaler =psc; //设置用来作为TIMx时钟频率除数的预分频值  10Khz的计数频率
    TIM_TimeBaseStructure.TIM_ClockDivision = 0; //设置时钟分割:TDTS = Tck_tim
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
    TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure); //根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位

    TIM_ITConfig(TIM2,TIM_IT_Update,ENABLE ); //使能指定的TIM2中断,允许更新中断

    NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;  //TIM2中断
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;  //先占优先级0级
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;  //从优先级3级
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
    NVIC_Init(&NVIC_InitStructure);  //根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器

    TIM_Cmd(TIM2, ENABLE);  //使能TIMx外设
}

////定时器2中断服务程序
void TIM2_IRQHandler(void)
{
    int i;
    if (TIM_GetITStatus(TIM2, TIM_IT_Update) != RESET)//是更新中断
    {
        USART3_RX_STA|=1<<15;	//标记接收完成
        TIM_ClearITPendingBit(TIM2, TIM_IT_Update  );  //清除TIM2更新中断标志
        TIM_Cmd(TIM2, DISABLE);  //关闭TIM2
        //printf("TIM2IRQ\r\n");

    }
}

void TIM3_Int_Init(void)
{
    NVIC_InitTypeDef NVIC_InitStructure;
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    TIM_ICInitTypeDef  TIM_ICInitStructure;

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3,ENABLE);	//TIM3 时钟使能
    TIM_TimeBaseStructure.TIM_Period = 10000; //设定计数器自动重装值 最大10ms溢出
    TIM_TimeBaseStructure.TIM_Prescaler =(72-1); 	//预分频器,1M的计数频率,1us加1.
    TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1; //设置时钟分割:TDTS = Tck_tim
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式

    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure); //根据指定的参数初始化TIMx

    TIM_ICInitStructure.TIM_Channel = TIM_Channel_4;  // 选择输入端 IC4映射到TI3上
    TIM_ICInitStructure.TIM_ICPolarity = TIM_ICPolarity_Rising;	//上升沿捕获
    TIM_ICInitStructure.TIM_ICSelection = TIM_ICSelection_DirectTI;
    TIM_ICInitStructure.TIM_ICPrescaler = TIM_ICPSC_DIV1;	 //配置输入分频,不分频
    TIM_ICInitStructure.TIM_ICFilter = 0x03;//IC4F=0011 配置输入滤波器 8个定时器时钟周期滤波
    TIM_ICInit(TIM3, &TIM_ICInitStructure);//初始化定时器输入捕获通道

    TIM_Cmd(TIM3,ENABLE ); 	//使能定时器3

    NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;  //TIM3中断
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;  //先占优先级0级
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 3;  //从优先级3级
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE; //IRQ通道被使能
    NVIC_Init(&NVIC_InitStructure);  //根据NVIC_InitStruct中指定的参数初始化外设NVIC寄存器

    TIM_ITConfig( TIM3,TIM_IT_Update|TIM_IT_CC4,ENABLE);//允许更新中断 ,允许CC4IE捕获中断
}

//遥控器接收状态
//[7]:收到了引导码标志
//[6]:得到了一个按键的所有信息
//[5]:保留
//[4]:标记上升沿是否已经被捕获
//[3:0]:溢出计时器
u8 	RmtSta=0;
u16 Dval;		//下降沿时计数器的值
u32 RmtRec=0;	//红外接收到的数据
u8  RmtCnt=0;	//按键按下的次数
//定时器4中断服务程序
void TIM3_IRQHandler(void)
{

    if(TIM_GetITStatus(TIM3,TIM_IT_Update)!=RESET)
    {
        if(RmtSta&0x80)								//上次有数据被接收到了
        {
            RmtSta&=~0X10;							//取消上升沿已经被捕获标记
            if((RmtSta&0X0F)==0X00)RmtSta|=1<<6;	//标记已经完成一次按键的键值信息采集
            if((RmtSta&0X0F)<14)RmtSta++;
            else
            {
                RmtSta&=~(1<<7);					//清空引导标识
                RmtSta&=0XF0;						//清空计数器
            }
        }
    }
    if(TIM_GetITStatus(TIM3,TIM_IT_CC4)!=RESET)
    {
        if(RDATA)//上升沿捕获
        {
            TIM_OC4PolarityConfig(TIM3,TIM_ICPolarity_Falling);						//CC4P=1	设置为下降沿捕获
            TIM_SetCounter(TIM3,0);							//清空定时器值
            RmtSta|=0X10;							//标记上升沿已经被捕获
        } else //下降沿捕获
        {
            Dval=TIM_GetCapture4(TIM3);					//读取CCR4也可以清CC4IF标志位
            TIM_OC4PolarityConfig(TIM3,TIM_ICPolarity_Rising);				//CC4P=0	设置为上升沿捕获
            if(RmtSta&0X10)							//完成一次高电平捕获
            {
                if(RmtSta&0X80)//接收到了引导码
                {

                    if(Dval>300&&Dval<800)			//560为标准值,560us
                    {
                        RmtRec<<=1;					//左移一位.
                        RmtRec|=0;					//接收到0
                    } else if(Dval>1400&&Dval<1800)	//1680为标准值,1680us
                    {
                        RmtRec<<=1;					//左移一位.
                        RmtRec|=1;					//接收到1
                    } else if(Dval>2200&&Dval<2600)	//得到按键键值增加的信息 2500为标准值2.5ms
                    {
                        RmtCnt++; 					//按键次数增加1次
                        RmtSta&=0XF0;				//清空计时器
                    }
                } else if(Dval>4200&&Dval<4700)		//4500为标准值4.5ms
                {
                    RmtSta|=1<<7;					//标记成功接收到了引导码
                    RmtCnt=0;						//清除按键次数计数器
                }
            }
            RmtSta&=~(1<<4);
        }
    }
    TIM_ClearITPendingBit(TIM3,TIM_IT_Update|TIM_IT_CC4);
}

void TIM4_Int_Init(u16 arr,u16 psc)
{
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
    NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);

    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM4, ENABLE);   //使能对应RCC时钟
    //配置定时器基础结构体
    TIM_DeInit(TIM4);
    TIM_TimeBaseStructure.TIM_Period = arr; //设置在下一个更新事件装入活动的自动重装载寄存器周期的值         计数到1000为1ms
    TIM_TimeBaseStructure.TIM_Prescaler =psc; //设置用来作为TIMx时钟频率除数的预分频值  1M的计数频率 1US计数
    TIM_TimeBaseStructure.TIM_ClockDivision=TIM_CKD_DIV1;//不分频
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;  //TIM向上计数模式
    TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure); //根据TIM_TimeBaseInitStruct中指定的参数初始化TIMx的时间基数单位

    TIM_ClearFlag(TIM4, TIM_FLAG_Update);   //清除更新中断，免得一打开中断立即产生中断
    TIM_ITConfig(TIM4,TIM_IT_Update,ENABLE);    //打开定时器更新中断
    TIM_Cmd(TIM4,DISABLE);

}

extern u16 msHcCount;
void TIM4_IRQHandler(void)   //TIM4中断
{
    if (TIM_GetITStatus(TIM4, TIM_IT_Update) != RESET)  //检查TIM4更新中断发生与否
    {
        TIM_ClearITPendingBit(TIM4, TIM_IT_Update  );  //清除TIMx更新中断标志
        msHcCount++;
    }
}
