#include "my_func.h"

//初始化电机、LED、限位开关等只使用电平控制的I/O
//IO初始化
void GPIO_init(void)
{

    GPIO_InitTypeDef  GPIO_InitStructure;
	
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA|RCC_APB2Periph_GPIOB|RCC_APB2Periph_GPIOC|RCC_APB2Periph_GPIOD|RCC_APB2Periph_GPIOE|RCC_APB2Periph_AFIO, ENABLE);	 //使能PA、B、C、D、E端口时钟
	GPIO_PinRemapConfig(GPIO_Remap_SWJ_JTAGDisable , ENABLE);		//禁用JTAG
	/********************************推挽输出****************************************************/
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_11|GPIO_Pin_12;				 //LED0-->PB.5 端口配置
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP; 		 //推挽输出
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;		 //IO口速度为50MHz
    GPIO_Init(GPIOA, &GPIO_InitStructure);					 //根据设定参数初始化GPIOA

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_8;	
    GPIO_Init(GPIOD, &GPIO_InitStructure);					 //根据设定参数初始化GPIOD

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2|GPIO_Pin_3|GPIO_Pin_7|GPIO_Pin_10|GPIO_Pin_11|GPIO_Pin_12|GPIO_Pin_13;	
    GPIO_Init(GPIOE, &GPIO_InitStructure);					 //根据设定参数初始化GPIOE
/********************************************************************************************/

/********************************上拉输入****************************************************/
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4;			
		
    GPIO_Init(GPIOA, &GPIO_InitStructure);					 //根据设定参数初始化GPIOA
	
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_14;	
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; 				//设置成上拉输入
    GPIO_Init(GPIOB, &GPIO_InitStructure);					 //根据设定参数初始化GPIOB
	
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0|GPIO_Pin_3|GPIO_Pin_6|GPIO_Pin_7|GPIO_Pin_14|GPIO_Pin_15;	
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; 	
	GPIO_Init(GPIOC, &GPIO_InitStructure);					 //根据设定参数初始化GPIOC

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9|GPIO_Pin_10|GPIO_Pin_11|GPIO_Pin_12|GPIO_Pin_15;	
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; 	
	GPIO_Init(GPIOD, &GPIO_InitStructure);					 //根据设定参数初始化GPIOD

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8|GPIO_Pin_9;	
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU; 	
    GPIO_Init(GPIOE, &GPIO_InitStructure);					 //根据设定参数初始化GPIOE
/********************************************************************************************/
	DOOR_L_STOP;DOOR_R_STOP;
}   

//按键处理函数
//返回按键值
//mode:0,不支持连续按;1,支持连续按;
//0，没有任何按键按下
//1，KEY0按下
//2，KEY1按下
//3，KEY2按下 
//4，KEY3按下 WK_UP
//注意此函数有响应优先级,KEY0>KEY1>KEY2>KEY3!!
u8 KEY_Scan(u8 mode)
{	 
	static u8 key_up=1;//按键按松开标志
	if(mode)key_up=1;  //支持连按		  
	if(key_up&&(KEY_U==0||KEY_D==0||KEY_L==0||KEY_R==0))
	{
		delay_ms(10);//去抖动 
		key_up=0;
		if(KEY_U==0)
		{
			return KEYU_PRES;
		}	
		else if(KEY_D==0)
		{
			return KEYD_PRES;
		}
		else if(KEY_L==0)
		{
			return KEYL_PRES;
		}
		else if(KEY_R==0)
		{
		//	while(!KEY_R);
			return KEYR_PRES;
		}
	}else if(KEY_U==1&&KEY_D==1&&KEY_L==1&&KEY_R==1)key_up=1; 	    
 	return 0;// 无按键按下
}
